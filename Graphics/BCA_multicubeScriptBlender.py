import numpy as np
import serial
import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def getUpdatedVoxels(NewFrame, OldFrame):
    Diff = np.bitwise_xor(NewFrame, OldFrame)
    DiffPos = np.nonzero(Diff)
    UpdatePacket = ""
    i_last, j_last, k_last = -1, -1, -1
    for Pn in range(len(DiffPos[0])):
        i, j, k = DiffPos[0][Pn], DiffPos[1][Pn], DiffPos[2][Pn]
        if i_last == i and j_last == j and k_last == k:
            continue
        i_last, j_last, k_last = i, j, k
        UpdatePacket += chr(0b01000000 | NewFrame[i, j, k, 0] << 5 | i)
        UpdatePacket += chr(0b00000000 | NewFrame[i, j, k, 1] << 5 | j)
        UpdatePacket += chr(0b00000000 | NewFrame[i, j, k, 2] << 5 | k)
    return UpdatePacket

def read_animation_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    animation_data = []
    frame_data = []
    for line in lines:
        if line.startswith("Frame:"):
            if frame_data:
                animation_data.append(frame_data)
                frame_data = []
        else:
            frame_data.extend(eval(line.strip()))
    if frame_data:
        animation_data.append(frame_data)
    return animation_data

def visualize_frame(frame):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    for x, y, z, r, g, b in frame:
        color = (r, g, b)
        ax.scatter(x, y, z, c=[color], marker='o')
    ax.set_xlim([0, 24])
    ax.set_ylim([0, 24])
    ax.set_zlim([0, 32])
    plt.show()

def send_to_led_cube(animation_data, port="COM3", baudrate=9600):
    try:
        ser = serial.Serial(port, baudrate)
        OldFrame = np.zeros((24, 24, 32, 3), dtype=bool)
        for frame in animation_data:
            NewFrame = np.zeros((24, 24, 32, 3), dtype=bool)
            for x, y, z, r, g, b in frame:
                NewFrame[x, y, z] = [r, g, b]
            UpdatePacket = getUpdatedVoxels(NewFrame, OldFrame)
            ser.write(UpdatePacket.encode())
            OldFrame = NewFrame
            time.sleep(0.1)  # Adjust based on desired frame rate
        ser.close()
    except serial.SerialException:
        print("LED cube not connected. Visualizing frames.")
        for frame in animation_data:
            visualize_frame(frame)
            time.sleep(0.1)  # Adjust based on desired frame rate

# Read the animation data from the file generated by Blender script
animation_data = read_animation_file("temp1_LargeCube.txt")

# Send the animation data to the LED cube or visualize if not connected
send_to_led_cube(animation_data)
